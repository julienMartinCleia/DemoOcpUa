/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.11, using .NET Server 3.4.0 template (version 0)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
** </auto-generated>
**
** Copyright (c) 2006-2024 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.8
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.8, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://yourorganisation.org/DemoOpcUa/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.8/
**
** Created: 20.03.2024
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;

namespace cleia.DemoOpcUa
{
    #region SlotVariableModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=VariableTypes.SlotVariableType, NamespaceUri=cleia.DemoOpcUa.Namespaces.DemoOpcUa)]
    public partial class SlotVariableModel : BaseDataVariableModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="SlotVariableModel" /> class.
        /// </summary>
        public SlotVariableModel() : this((SlotVariableModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SlotVariableModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        /// <param name="dummy">Dummy argument to enable writing own constructors that are called by the generated code.</param>
        public SlotVariableModel(SlotVariableModel template, DummyArgument dummy = null) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                Dimension = template.Dimension == null ? null : template.Dimension.Clone() as short[];
                Location = template.Location == null ? null : template.Location.Clone() as short[];
                ProductId = template.ProductId;
                ProductName = template.ProductName == null ? null : template.ProductName.Clone() as string;
                Rotation = template.Rotation == null ? null : template.Rotation.Clone() as short[];
            }
        }
        #endregion

        #region Public Properties

        /// <summary>
        /// Gets or sets the value.
        /// </summary>
        [UaInstanceDeclaration(IsValue = true, NamespaceUri = cleia.DemoOpcUa.Namespaces.DemoOpcUa)]
        public new SlotType Value
        {
            get {return (SlotType) base.Value;}
            set {base.Value = value;}
        }

        /// <summary>
        /// Gets or sets the Dimension
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DemoOpcUa)]
        public short[] Dimension
        {
            get => m_Dimension;
            set => SetField(ref m_Dimension, value, nameof(Dimension));
        }
        private short[] m_Dimension;

        /// <summary>
        /// Gets or sets the Location
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DemoOpcUa)]
        public short[] Location
        {
            get => m_Location;
            set => SetField(ref m_Location, value, nameof(Location));
        }
        private short[] m_Location;

        /// <summary>
        /// Gets or sets the ProductId
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DemoOpcUa)]
        public short ProductId
        {
            get => m_ProductId;
            set => SetField(ref m_ProductId, value, nameof(ProductId));
        }
        private short m_ProductId;

        /// <summary>
        /// Gets or sets the ProductName
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DemoOpcUa)]
        public string ProductName
        {
            get => m_ProductName;
            set => SetField(ref m_ProductName, value, nameof(ProductName));
        }
        private string m_ProductName;

        /// <summary>
        /// Gets or sets the Rotation
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.DemoOpcUa)]
        public short[] Rotation
        {
            get => m_Rotation;
            set => SetField(ref m_Rotation, value, nameof(Rotation));
        }
        private short[] m_Rotation;


        #endregion
    }
    #endregion



}
